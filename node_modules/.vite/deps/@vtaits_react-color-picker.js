import {
  _objectWithoutProperties
} from "./chunk-ED4V52F4.js";
import {
  require_events
} from "./chunk-EE6GTNRQ.js";
import {
  _extends,
  init_extends
} from "./chunk-SUFR5NQW.js";
import "./chunk-EBW3JKEH.js";
import {
  require_tinycolor
} from "./chunk-LVLJ2MEW.js";
import {
  require_prop_types
} from "./chunk-DSFMVNFM.js";
import {
  require_object_assign
} from "./chunk-3M2UZNYF.js";
import "./chunk-VGPEVICO.js";
import {
  _getPrototypeOf,
  _possibleConstructorReturn
} from "./chunk-D7S3FPYH.js";
import {
  _inherits
} from "./chunk-RZQS4WSX.js";
import "./chunk-4EC2YINL.js";
import {
  _defineProperty
} from "./chunk-HKWV5KNA.js";
import {
  _assertThisInitialized,
  init_assertThisInitialized
} from "./chunk-6SNKQ5Q3.js";
import "./chunk-AZHVXIJD.js";
import {
  _classCallCheck
} from "./chunk-QQCM6MLG.js";
import {
  _createClass
} from "./chunk-VPHLUJNF.js";
import {
  require_classnames
} from "./chunk-U56G3BF2.js";
import {
  require_react
} from "./chunk-KL6BCPSF.js";
import {
  __commonJS,
  __toESM
} from "./chunk-S5KM4IGW.js";

// node_modules/hasown/index.js
var require_hasown = __commonJS({
  "node_modules/hasown/index.js"(exports, module) {
    "use strict";
    var hasOwn = Object.prototype.hasOwnProperty;
    function curry(fn, n) {
      if (typeof n !== "number") {
        n = fn.length;
      }
      function getCurryClosure(prevArgs) {
        function curryClosure() {
          var len = arguments.length;
          var args = [].concat(prevArgs);
          if (len) {
            args.push.apply(args, arguments);
          }
          if (args.length < n) {
            return getCurryClosure(args);
          }
          return fn.apply(this, args);
        }
        return curryClosure;
      }
      return getCurryClosure([]);
    }
    module.exports = curry(function(object, property) {
      return hasOwn.call(object, property);
    });
  }
});

// node_modules/newify/getInstantiatorFunction.js
var require_getInstantiatorFunction = __commonJS({
  "node_modules/newify/getInstantiatorFunction.js"(exports, module) {
    module.exports = function() {
      "use strict";
      var fns = {};
      return function(len) {
        if (!fns[len]) {
          var args = [];
          var i = 0;
          for (; i < len; i++) {
            args.push("a[" + i + "]");
          }
          fns[len] = new Function(
            "c",
            "a",
            "return new c(" + args.join(",") + ")"
          );
        }
        return fns[len];
      };
    }();
  }
});

// node_modules/newify/index.js
var require_newify = __commonJS({
  "node_modules/newify/index.js"(exports, module) {
    var getInstantiatorFunction = require_getInstantiatorFunction();
    module.exports = function(fn, args) {
      return getInstantiatorFunction(args.length)(fn, args);
    };
  }
});

// node_modules/region/node_modules/object-assign/index.js
var require_object_assign2 = __commonJS({
  "node_modules/region/node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    function ToObject(val) {
      if (val == null) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    module.exports = Object.assign || function(target, source) {
      var from;
      var keys;
      var to = ToObject(target);
      for (var s = 1; s < arguments.length; s++) {
        from = arguments[s];
        keys = Object.keys(Object(from));
        for (var i = 0; i < keys.length; i++) {
          to[keys[i]] = from[keys[i]];
        }
      }
      return to;
    };
  }
});

// node_modules/region/src/inherits.js
var require_inherits = __commonJS({
  "node_modules/region/src/inherits.js"(exports, module) {
    "use strict";
    module.exports = function(ctor, superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  }
});

// node_modules/region/src/validate.js
var require_validate = __commonJS({
  "node_modules/region/src/validate.js"(exports, module) {
    "use strict";
    module.exports = function validate(region) {
      var isValid = true;
      if (region.right < region.left) {
        isValid = false;
        region.right = region.left;
      }
      if (region.bottom < region.top) {
        isValid = false;
        region.bottom = region.top;
      }
      return isValid;
    };
  }
});

// node_modules/region/src/statics.js
var require_statics = __commonJS({
  "node_modules/region/src/statics.js"(exports, module) {
    "use strict";
    var hasOwn = require_hasown();
    var VALIDATE = require_validate();
    module.exports = function(REGION) {
      var MAX = Math.max;
      var MIN = Math.min;
      var statics = {
        init: function() {
          var exportAsNonStatic = {
            getIntersection: true,
            getIntersectionArea: true,
            getIntersectionHeight: true,
            getIntersectionWidth: true,
            getUnion: true
          };
          var thisProto = REGION.prototype;
          var newName;
          var exportHasOwn = hasOwn(exportAsNonStatic);
          var methodName;
          for (methodName in exportAsNonStatic)
            if (exportHasOwn(methodName)) {
              newName = exportAsNonStatic[methodName];
              if (typeof newName != "string") {
                newName = methodName;
              }
              ;
              (function(proto, methodName2, protoMethodName) {
                proto[methodName2] = function(region) {
                  if (!REGION[protoMethodName]) {
                    console.warn("cannot find method ", protoMethodName, " on ", REGION);
                  }
                  return REGION[protoMethodName](this, region);
                };
              })(thisProto, newName, methodName);
            }
        },
        validate: VALIDATE,
        getDocRegion: function() {
          return REGION.fromDOM(document.documentElement);
        },
        from: function(reg) {
          if (reg.__IS_REGION) {
            return reg;
          }
          if (typeof document != "undefined") {
            if (typeof HTMLElement != "undefined" && reg instanceof HTMLElement) {
              return REGION.fromDOM(reg);
            }
            if (reg.type && typeof reg.pageX !== "undefined" && typeof reg.pageY !== "undefined") {
              return REGION.fromEvent(reg);
            }
          }
          return REGION(reg);
        },
        fromEvent: function(event) {
          return REGION.fromPoint({
            x: event.pageX,
            y: event.pageY
          });
        },
        fromDOM: function(dom) {
          var rect = dom.getBoundingClientRect();
          return new REGION({
            top: rect.top,
            left: rect.left,
            bottom: rect.bottom,
            right: rect.right
          });
        },
        getIntersection: function(first, second) {
          var area = this.getIntersectionArea(first, second);
          if (area) {
            return new REGION(area);
          }
          return false;
        },
        getIntersectionWidth: function(first, second) {
          var minRight = MIN(first.right, second.right);
          var maxLeft = MAX(first.left, second.left);
          if (maxLeft < minRight) {
            return minRight - maxLeft;
          }
          return 0;
        },
        getIntersectionHeight: function(first, second) {
          var maxTop = MAX(first.top, second.top);
          var minBottom = MIN(first.bottom, second.bottom);
          if (maxTop < minBottom) {
            return minBottom - maxTop;
          }
          return 0;
        },
        getIntersectionArea: function(first, second) {
          var maxTop = MAX(first.top, second.top);
          var minRight = MIN(first.right, second.right);
          var minBottom = MIN(first.bottom, second.bottom);
          var maxLeft = MAX(first.left, second.left);
          if (maxTop < minBottom && maxLeft < minRight) {
            return {
              top: maxTop,
              right: minRight,
              bottom: minBottom,
              left: maxLeft,
              width: minRight - maxLeft,
              height: minBottom - maxTop
            };
          }
          return false;
        },
        getUnion: function(first, second) {
          var top = MIN(first.top, second.top);
          var right = MAX(first.right, second.right);
          var bottom = MAX(first.bottom, second.bottom);
          var left = MIN(first.left, second.left);
          return new REGION(top, right, bottom, left);
        },
        getRegion: function(reg) {
          return REGION.from(reg);
        },
        fromPoint: function(xy) {
          return new REGION({
            top: xy.y,
            bottom: xy.y,
            left: xy.x,
            right: xy.x
          });
        }
      };
      Object.keys(statics).forEach(function(key) {
        REGION[key] = statics[key];
      });
      REGION.init();
    };
  }
});

// node_modules/region/src/index.js
var require_src = __commonJS({
  "node_modules/region/src/index.js"(exports, module) {
    "use strict";
    var hasOwn = require_hasown();
    var newify = require_newify();
    var assign = require_object_assign2();
    var EventEmitter = require_events().EventEmitter;
    var inherits = require_inherits();
    var VALIDATE = require_validate();
    var objectToString = Object.prototype.toString;
    var isObject = function(value) {
      return objectToString.apply(value) === "[object Object]";
    };
    function copyList(source, target, list) {
      if (source) {
        list.forEach(function(key) {
          if (hasOwn(source, key)) {
            target[key] = source[key];
          }
        });
      }
      return target;
    }
    var POINT_POSITIONS = {
      cy: "YCenter",
      cx: "XCenter",
      t: "Top",
      tc: "TopCenter",
      tl: "TopLeft",
      tr: "TopRight",
      b: "Bottom",
      bc: "BottomCenter",
      bl: "BottomLeft",
      br: "BottomRight",
      l: "Left",
      lc: "LeftCenter",
      r: "Right",
      rc: "RightCenter",
      c: "Center"
    };
    var REGION = function(top, right, bottom, left) {
      if (!(this instanceof REGION)) {
        return newify(REGION, arguments);
      }
      EventEmitter.call(this);
      if (isObject(top)) {
        copyList(top, this, ["top", "right", "bottom", "left"]);
        if (top.bottom == null && top.height != null) {
          this.bottom = this.top + top.height;
        }
        if (top.right == null && top.width != null) {
          this.right = this.left + top.width;
        }
        if (top.emitChangeEvents) {
          this.emitChangeEvents = top.emitChangeEvents;
        }
      } else {
        this.top = top;
        this.right = right;
        this.bottom = bottom;
        this.left = left;
      }
      this[0] = this.left;
      this[1] = this.top;
      VALIDATE(this);
    };
    inherits(REGION, EventEmitter);
    assign(REGION.prototype, {
      emitChangeEvents: false,
      getRegion: function(clone) {
        return clone ? this.clone() : this;
      },
      setRegion: function(reg) {
        if (reg instanceof REGION) {
          this.set(reg.get());
        } else {
          this.set(reg);
        }
        return this;
      },
      validate: function() {
        return REGION.validate(this);
      },
      _before: function() {
        if (this.emitChangeEvents) {
          return copyList(this, {}, ["left", "top", "bottom", "right"]);
        }
      },
      _after: function(before) {
        if (this.emitChangeEvents) {
          if (this.top != before.top || this.left != before.left) {
            this.emitPositionChange();
          }
          if (this.right != before.right || this.bottom != before.bottom) {
            this.emitSizeChange();
          }
        }
      },
      notifyPositionChange: function() {
        this.emit("changeposition", this);
      },
      emitPositionChange: function() {
        this.notifyPositionChange();
      },
      notifySizeChange: function() {
        this.emit("changesize", this);
      },
      emitSizeChange: function() {
        this.notifySizeChange();
      },
      add: function(directions) {
        var before = this._before();
        var direction;
        for (direction in directions)
          if (hasOwn(directions, direction)) {
            this[direction] += directions[direction];
          }
        this[0] = this.left;
        this[1] = this.top;
        this._after(before);
        return this;
      },
      substract: function(directions) {
        var before = this._before();
        var direction;
        for (direction in directions)
          if (hasOwn(directions, direction)) {
            this[direction] -= directions[direction];
          }
        this[0] = this.left;
        this[1] = this.top;
        this._after(before);
        return this;
      },
      getSize: function() {
        return {
          width: this.width,
          height: this.height
        };
      },
      setPosition: function(position) {
        var width = this.width;
        var height = this.height;
        if (position.left != void 0) {
          position.right = position.left + width;
        }
        if (position.top != void 0) {
          position.bottom = position.top + height;
        }
        return this.set(position);
      },
      setSize: function(size) {
        if (size.height != void 0 && size.width != void 0) {
          return this.set({
            right: this.left + size.width,
            bottom: this.top + size.height
          });
        }
        if (size.width != void 0) {
          this.setWidth(size.width);
        }
        if (size.height != void 0) {
          this.setHeight(size.height);
        }
        return this;
      },
      setWidth: function(width) {
        return this.set({
          right: this.left + width
        });
      },
      setHeight: function(height) {
        return this.set({
          bottom: this.top + height
        });
      },
      set: function(directions) {
        var before = this._before();
        copyList(directions, this, ["left", "top", "bottom", "right"]);
        if (directions.bottom == null && directions.height != null) {
          this.bottom = this.top + directions.height;
        }
        if (directions.right == null && directions.width != null) {
          this.right = this.left + directions.width;
        }
        this[0] = this.left;
        this[1] = this.top;
        this._after(before);
        return this;
      },
      get: function(dir) {
        return dir ? this[dir] : copyList(this, {}, ["left", "right", "top", "bottom"]);
      },
      shift: function(directions) {
        var before = this._before();
        if (directions.top) {
          this.top += directions.top;
          this.bottom += directions.top;
        }
        if (directions.left) {
          this.left += directions.left;
          this.right += directions.left;
        }
        this[0] = this.left;
        this[1] = this.top;
        this._after(before);
        return this;
      },
      unshift: function(directions) {
        if (directions.top) {
          directions.top *= -1;
        }
        if (directions.left) {
          directions.left *= -1;
        }
        return this.shift(directions);
      },
      equals: function(region) {
        return this.equalsPosition(region) && this.equalsSize(region);
      },
      equalsSize: function(size) {
        var isInstance = size instanceof REGION;
        var s = {
          width: size.width == null && isInstance ? size.getWidth() : size.width,
          height: size.height == null && isInstance ? size.getHeight() : size.height
        };
        return this.getWidth() == s.width && this.getHeight() == s.height;
      },
      equalsPosition: function(region) {
        return this.top == region.top && this.left == region.left;
      },
      addLeft: function(left) {
        var before = this._before();
        this.left = this[0] = this.left + left;
        this._after(before);
        return this;
      },
      addTop: function(top) {
        var before = this._before();
        this.top = this[1] = this.top + top;
        this._after(before);
        return this;
      },
      addBottom: function(bottom) {
        var before = this._before();
        this.bottom += bottom;
        this._after(before);
        return this;
      },
      addRight: function(right) {
        var before = this._before();
        this.right += right;
        this._after(before);
        return this;
      },
      minTop: function() {
        return this.expand({ top: 1 });
      },
      maxBottom: function() {
        return this.expand({ bottom: 1 });
      },
      minLeft: function() {
        return this.expand({ left: 1 });
      },
      maxRight: function() {
        return this.expand({ right: 1 });
      },
      expand: function(directions, region) {
        var docRegion = region || REGION.getDocRegion();
        var list = [];
        var direction;
        var before = this._before();
        for (direction in directions)
          if (hasOwn(directions, direction)) {
            list.push(direction);
          }
        copyList(docRegion, this, list);
        this[0] = this.left;
        this[1] = this.top;
        this._after(before);
        return this;
      },
      clone: function() {
        return new REGION({
          top: this.top,
          left: this.left,
          right: this.right,
          bottom: this.bottom
        });
      },
      containsPoint: function(x, y) {
        if (arguments.length == 1) {
          y = x.y;
          x = x.x;
        }
        return this.left <= x && x <= this.right && this.top <= y && y <= this.bottom;
      },
      containsRegion: function(region) {
        return this.containsPoint(region.left, region.top) && this.containsPoint(region.right, region.bottom);
      },
      diffHeight: function(region) {
        return this.diff(region, { top: true, bottom: true });
      },
      diffWidth: function(region) {
        return this.diff(region, { left: true, right: true });
      },
      diff: function(region, directions) {
        var result = {};
        var dirName;
        for (dirName in directions)
          if (hasOwn(directions, dirName)) {
            result[dirName] = this[dirName] - region[dirName];
          }
        return result;
      },
      getPosition: function() {
        return {
          left: this.left,
          top: this.top
        };
      },
      getPoint: function(position, asLeftTop) {
        if (!POINT_POSITIONS[position]) {
          console.warn("The position ", position, " could not be found! Available options are tl, bl, tr, br, l, r, t, b.");
        }
        var method = "getPoint" + POINT_POSITIONS[position], result = this[method]();
        if (asLeftTop) {
          return {
            left: result.x,
            top: result.y
          };
        }
        return result;
      },
      getPointYCenter: function() {
        return { x: null, y: this.top + this.getHeight() / 2 };
      },
      getPointXCenter: function() {
        return { x: this.left + this.getWidth() / 2, y: null };
      },
      getPointTop: function() {
        return { x: null, y: this.top };
      },
      getPointTopCenter: function() {
        return { x: this.left + this.getWidth() / 2, y: this.top };
      },
      getPointTopLeft: function() {
        return { x: this.left, y: this.top };
      },
      getPointTopRight: function() {
        return { x: this.right, y: this.top };
      },
      getPointBottom: function() {
        return { x: null, y: this.bottom };
      },
      getPointBottomCenter: function() {
        return { x: this.left + this.getWidth() / 2, y: this.bottom };
      },
      getPointBottomLeft: function() {
        return { x: this.left, y: this.bottom };
      },
      getPointBottomRight: function() {
        return { x: this.right, y: this.bottom };
      },
      getPointLeft: function() {
        return { x: this.left, y: null };
      },
      getPointLeftCenter: function() {
        return { x: this.left, y: this.top + this.getHeight() / 2 };
      },
      getPointRight: function() {
        return { x: this.right, y: null };
      },
      getPointRightCenter: function() {
        return { x: this.right, y: this.top + this.getHeight() / 2 };
      },
      getPointCenter: function() {
        return { x: this.left + this.getWidth() / 2, y: this.top + this.getHeight() / 2 };
      },
      getHeight: function() {
        return this.bottom - this.top;
      },
      getWidth: function() {
        return this.right - this.left;
      },
      getTop: function() {
        return this.top;
      },
      getLeft: function() {
        return this.left;
      },
      getBottom: function() {
        return this.bottom;
      },
      getRight: function() {
        return this.right;
      },
      getArea: function() {
        return this.getWidth() * this.getHeight();
      },
      constrainTo: function(contrain) {
        var intersect = this.getIntersection(contrain);
        var shift;
        if (!intersect || !intersect.equals(this)) {
          var contrainWidth = contrain.getWidth(), contrainHeight = contrain.getHeight();
          if (this.getWidth() > contrainWidth) {
            this.left = contrain.left;
            this.setWidth(contrainWidth);
          }
          if (this.getHeight() > contrainHeight) {
            this.top = contrain.top;
            this.setHeight(contrainHeight);
          }
          shift = {};
          if (this.right > contrain.right) {
            shift.left = contrain.right - this.right;
          }
          if (this.bottom > contrain.bottom) {
            shift.top = contrain.bottom - this.bottom;
          }
          if (this.left < contrain.left) {
            shift.left = contrain.left - this.left;
          }
          if (this.top < contrain.top) {
            shift.top = contrain.top - this.top;
          }
          this.shift(shift);
          return true;
        }
        return false;
      },
      __IS_REGION: true
    });
    Object.defineProperties(REGION.prototype, {
      width: {
        get: function() {
          return this.getWidth();
        },
        set: function(width) {
          return this.setWidth(width);
        }
      },
      height: {
        get: function() {
          return this.getHeight();
        },
        set: function(height) {
          return this.setHeight(height);
        }
      }
    });
    require_statics()(REGION);
    module.exports = REGION;
  }
});

// node_modules/region/index.js
var require_region = __commonJS({
  "node_modules/region/index.js"(exports, module) {
    module.exports = require_src();
  }
});

// node_modules/region-align/Region.static.js
var require_Region_static = __commonJS({
  "node_modules/region-align/Region.static.js"() {
    "use strict";
    var Region2 = require_region();
    Region2.align = function(sourceRegion, targetRegion, align) {
      targetRegion = Region2.from(targetRegion);
      align = (align || "c-c").split("-");
      if (align.length != 2) {
        console.warn("Incorrect region alignment! The align parameter need to be in the form 'br-c', that is, a - separated string!", align);
      }
      return Region2.alignToPoint(sourceRegion, targetRegion.getPoint(align[1]), align[0]);
    };
    Region2.alignToPoint = function(region, point, anchor) {
      region = Region2.from(region);
      var sourcePoint = region.getPoint(anchor);
      var count = 0;
      var shiftObj = {};
      if (sourcePoint.x != null && point.x != null) {
        count++;
        shiftObj.left = point.x - sourcePoint.x;
      }
      if (sourcePoint.y != null && point.y != null) {
        count++;
        shiftObj.top = point.y - sourcePoint.y;
      }
      if (count) {
        region.shift(shiftObj);
      }
      return region;
    };
  }
});

// node_modules/region-align/Region.proto.js
var require_Region_proto = __commonJS({
  "node_modules/region-align/Region.proto.js"() {
    "use strict";
    var Region2 = require_region();
    Region2.prototype.alignToRegion = function(region, alignPositions) {
      Region2.align(this, region, alignPositions);
      return this;
    };
    Region2.prototype.alignToPoint = function(point, anchor) {
      Region2.alignToPoint(this, point, anchor);
      return this;
    };
  }
});

// node_modules/region-align/alignToNormalized.js
var require_alignToNormalized = __commonJS({
  "node_modules/region-align/alignToNormalized.js"(exports, module) {
    "use strict";
    var Region2 = require_region();
    function ALIGN_TO_NORMALIZED(sourceRegion, targetRegion, positions, config) {
      targetRegion = Region2.from(targetRegion);
      config = config || {};
      var constrainTo = config.constrain, syncOption = config.sync, offsets = config.offset || [], syncWidth = false, syncHeight = false, sourceClone = sourceRegion.clone();
      if (!Array.isArray(positions)) {
        positions = positions ? [positions] : [];
      }
      if (!Array.isArray(offsets)) {
        offsets = offsets ? [offsets] : [];
      }
      if (constrainTo) {
        constrainTo = constrainTo === true ? Region2.getDocRegion() : constrainTo.getRegion();
      }
      if (syncOption) {
        if (syncOption.size) {
          syncWidth = true;
          syncHeight = true;
        } else {
          syncWidth = syncOption === true ? true : syncOption.width || false;
          syncHeight = syncOption === true ? true : syncOption.height || false;
        }
      }
      if (syncWidth) {
        sourceClone.setWidth(targetRegion.getWidth());
      }
      if (syncHeight) {
        sourceClone.setHeight(targetRegion.getHeight());
      }
      var offset, i = 0, len = positions.length, pos, intersection, itArea, maxArea = -1, maxAreaIndex = -1;
      for (; i < len; i++) {
        pos = positions[i];
        offset = offsets[i];
        sourceClone.alignToRegion(targetRegion, pos);
        if (offset) {
          if (!Array.isArray(offset)) {
            offset = offsets[i] = [offset.x || offset.left, offset.y || offset.top];
          }
          sourceClone.shift({
            left: offset[0],
            top: offset[1]
          });
        }
        if (constrainTo) {
          intersection = sourceClone.getIntersection(constrainTo);
          if (intersection && intersection.equals(sourceClone)) {
            sourceRegion.set(sourceClone);
            return pos;
          } else {
            if (intersection && (itArea = intersection.getArea()) > maxArea) {
              maxArea = itArea;
              maxAreaIndex = i;
            }
          }
        } else {
          sourceRegion.set(sourceClone);
          return pos;
        }
      }
      if (~maxAreaIndex) {
        pos = positions[maxAreaIndex];
        offset = offsets[maxAreaIndex];
        sourceClone.alignToRegion(targetRegion, pos);
        if (offset) {
          sourceClone.shift({
            left: offset[0],
            top: offset[1]
          });
        }
        intersection = sourceClone.getIntersection(constrainTo);
        sourceClone.setRegion(intersection);
        sourceClone.alignToRegion(targetRegion, pos);
        if (offset) {
          sourceClone.shift({
            left: offset[0],
            top: offset[1]
          });
        }
        sourceRegion.set(sourceClone);
        return pos;
      }
    }
    module.exports = ALIGN_TO_NORMALIZED;
  }
});

// node_modules/region-align/computeAlignRegion.js
var require_computeAlignRegion = __commonJS({
  "node_modules/region-align/computeAlignRegion.js"(exports, module) {
    "use strict";
    var ALIGN_TO_NORMALIZED = require_alignToNormalized();
    var Region2 = require_region();
    function COMPUTE_ALIGN_REGION(sourceRegion, targetRegion, positions, config) {
      sourceRegion = Region2.from(sourceRegion);
      var sourceClone = sourceRegion.clone();
      var position = ALIGN_TO_NORMALIZED(sourceClone, targetRegion, positions, config);
      return {
        position,
        region: sourceClone,
        widthChanged: sourceClone.getWidth() != sourceRegion.getWidth(),
        heightChanged: sourceClone.getHeight() != sourceRegion.getHeight(),
        positionChanged: sourceClone.equalsPosition(sourceRegion)
      };
    }
    module.exports = COMPUTE_ALIGN_REGION;
  }
});

// node_modules/region-align/index.js
var require_region_align = __commonJS({
  "node_modules/region-align/index.js"(exports, module) {
    "use strict";
    var Region2 = require_region();
    require_Region_static();
    require_Region_proto();
    var COMPUTE_ALIGN_REGION = require_computeAlignRegion();
    Region2.alignRegions = function(sourceRegion, targetRegion, positions, config) {
      var result = COMPUTE_ALIGN_REGION(sourceRegion, targetRegion, positions, config);
      var alignedRegion = result.region;
      if (!alignedRegion.equals(sourceRegion)) {
        sourceRegion.setRegion(alignedRegion);
      }
      return result.position;
    };
    Region2.prototype.alignTo = function(target, positions, config) {
      config = config || {};
      var sourceRegion = this;
      var targetRegion = Region2.from(target);
      var result = COMPUTE_ALIGN_REGION(sourceRegion, targetRegion, positions, config);
      var resultRegion = result.region;
      if (!resultRegion.equalsSize(sourceRegion)) {
        this.setSize(resultRegion.getSize());
      }
      if (!resultRegion.equalsPosition(sourceRegion)) {
        this.setPosition(resultRegion.getPosition(), { absolute: !!config.absolute });
      }
      return result.position;
    };
    module.exports = Region2;
  }
});

// node_modules/has-touch/index.js
var require_has_touch = __commonJS({
  "node_modules/has-touch/index.js"(exports, module) {
    module.exports = "ontouchstart" in global || global.DocumentTouch && document instanceof DocumentTouch;
  }
});

// node_modules/drag-helper/utils/once.js
var require_once = __commonJS({
  "node_modules/drag-helper/utils/once.js"(exports, module) {
    "use once";
    module.exports = function once(fn, scope) {
      var called;
      var result;
      return function() {
        if (called) {
          return result;
        }
        called = true;
        return result = fn.apply(scope || this, arguments);
      };
    };
  }
});

// node_modules/drag-helper/index.js
var require_drag_helper = __commonJS({
  "node_modules/drag-helper/index.js"(exports, module) {
    "use strict";
    var assign = require_object_assign();
    var Region2 = require_region_align();
    var hasTouch = require_has_touch();
    var once = require_once();
    var mobileTest = global.navigator ? /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(global.navigator.userAgent) : false;
    var isMobile = hasTouch && mobileTest;
    var Helper = function(config) {
      this.config = config;
    };
    var EVENTS = {
      move: isMobile ? "touchmove" : "mousemove",
      up: isMobile ? "touchend" : "mouseup"
    };
    function getPageCoords(event) {
      var firstTouch;
      var pageX = event.pageX;
      var pageY = event.pageY;
      if (isMobile && event.touches && (firstTouch = event.touches[0])) {
        pageX = firstTouch.pageX;
        pageY = firstTouch.pageY;
      }
      return {
        pageX,
        pageY
      };
    }
    assign(Helper.prototype, {
      initDrag: function(event) {
        this.onDragInit(event);
        var events = this.config.events || EVENTS;
        var onDragStart = once(this.onDragStart, this);
        var target = isMobile ? event.target : global;
        var mouseMoveListener = function(event2) {
          onDragStart(event2);
          this.onDrag(event2);
        }.bind(this);
        var mouseUpListener = function(event2) {
          this.onDrop(event2);
          target.removeEventListener(events.move, mouseMoveListener);
          target.removeEventListener(events.up, mouseUpListener);
        }.bind(this);
        target.addEventListener(events.move, mouseMoveListener, false);
        target.addEventListener(events.up, mouseUpListener);
      },
      onDragInit: function(event) {
        var config = {
          diff: {
            left: 0,
            top: 0
          }
        };
        this.state = {
          config
        };
        if (this.config.region) {
          this.state.initialRegion = Region2.from(this.config.region);
          this.state.dragRegion = config.dragRegion = this.state.initialRegion.clone();
        }
        if (this.config.constrainTo) {
          this.state.constrainTo = Region2.from(this.config.constrainTo);
        }
        this.callConfig("onDragInit", event);
      },
      onDragStart: function(event) {
        this.state.initPageCoords = getPageCoords(event);
        this.state.didDrag = this.state.config.didDrag = true;
        this.callConfig("onDragStart", event);
      },
      onDrag: function(event) {
        var config = this.state.config;
        var initPageCoords = this.state.initPageCoords;
        var eventCoords = getPageCoords(event);
        var diff = config.diff = {
          left: eventCoords.pageX - initPageCoords.pageX,
          top: eventCoords.pageY - initPageCoords.pageY
        };
        if (this.state.initialRegion) {
          var dragRegion = config.dragRegion;
          dragRegion.set(this.state.initialRegion);
          dragRegion.shift(diff);
          if (this.state.constrainTo) {
            var boolConstrained = dragRegion.constrainTo(this.state.constrainTo);
            diff.left = dragRegion.left - this.state.initialRegion.left;
            diff.top = dragRegion.top - this.state.initialRegion.top;
          }
          config.dragRegion = dragRegion;
        }
        this.callConfig("onDrag", event);
      },
      onDrop: function(event) {
        this.callConfig("onDrop", event);
        this.state = null;
      },
      callConfig: function(fnName, event) {
        var config = this.state.config;
        var args = [event, config];
        var fn = this.config[fnName];
        if (fn) {
          fn.apply(this, args);
        }
      }
    });
    module.exports = function(event, config) {
      if (config.scope) {
        var skippedKeys = {
          scope: 1,
          region: 1,
          constrainTo: 1
        };
        Object.keys(config).forEach(function(key) {
          var value = config[key];
          if (key in skippedKeys) {
            return;
          }
          if (typeof value == "function") {
            config[key] = value.bind(config.scope);
          }
        });
      }
      var helper = new Helper(config);
      helper.initDrag(event);
      return helper;
    };
  }
});

// node_modules/@vtaits/react-color-picker/es/index.js
init_extends();
init_assertThisInitialized();
var import_react4 = __toESM(require_react());
var import_classnames2 = __toESM(require_classnames());
var import_prop_types4 = __toESM(require_prop_types());

// node_modules/@vtaits/react-color-picker/es/HueSpectrum.js
init_assertThisInitialized();
var import_react2 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());

// node_modules/@vtaits/react-color-picker/es/utils/common.js
init_assertThisInitialized();
var import_react = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var import_region = __toESM(require_region());
var import_drag_helper = __toESM(require_drag_helper());

// node_modules/@vtaits/react-color-picker/es/utils/color.js
var import_tinycolor2 = __toESM(require_tinycolor());
function toColor(color) {
  return (0, import_tinycolor2.default)(color);
}
function fromRatio(color) {
  return import_tinycolor2.default.fromRatio(color);
}
function toHsv(color) {
  return toColor(color).toHsv();
}

// node_modules/@vtaits/react-color-picker/es/utils/toStringValue.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var toStringValue = function toStringValue2(color) {
  var newColor = toColor(_objectSpread({}, color));
  return newColor.toRgb().a === 1 ? newColor.toHexString() : newColor.toRgbString();
};
var toStringValue_default = toStringValue;

// node_modules/@vtaits/react-color-picker/es/utils/common.js
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var baseInitialState = {
  top: 0,
  left: 0,
  mouseDown: null
};
var basePropTypes = {
  inPicker: import_prop_types.default.bool,
  onMouseDown: import_prop_types.default.func,
  onDrag: import_prop_types.default.func,
  onChange: import_prop_types.default.func
};
var baseDefaultProps = {
  inPicker: false,
  onMouseDown: null,
  onDrag: null,
  onChange: null
};
var getEventInfo = function getEventInfo2(event, region) {
  var x = event.clientX - region.left;
  var y = event.clientY - region.top;
  return {
    x,
    y,
    width: region.getWidth(),
    height: region.getHeight()
  };
};
var BaseComponent = function(_Component) {
  _inherits(BaseComponent2, _Component);
  var _super = _createSuper(BaseComponent2);
  function BaseComponent2() {
    var _this;
    _classCallCheck(this, BaseComponent2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "state", baseInitialState);
    _defineProperty(_assertThisInitialized(_this), "rootRef", (0, import_react.createRef)());
    _defineProperty(_assertThisInitialized(_this), "handleDragStart", Function.prototype);
    _defineProperty(_assertThisInitialized(_this), "onMouseDown", function(event) {
      event.preventDefault();
      var region = _this.getDOMRegion();
      var info = getEventInfo(event, region);
      (0, import_drag_helper.default)(event, {
        scope: _assertThisInitialized(_this),
        constrainTo: region,
        onDragStart: function onDragStart(dragStartEvent, config) {
          config.initialPoint = info;
          config.minLeft = 0;
          config.maxLeft = region.width;
          this.handleDragStart(dragStartEvent);
        },
        onDrag: function onDrag(dragEvent, config) {
          var dragInfo = getEventInfo(dragEvent, region);
          var newHsv = this.updateColor(dragInfo);
          this.handleDrag(dragEvent, config, newHsv);
        },
        onDrop: function onDrop(dropEvent, config) {
          var dropInfo = getEventInfo(dropEvent, region);
          var newHsv = this.updateColor(dropInfo);
          this.handleDrop(dropEvent, config, newHsv);
        }
      });
      _this.updateColor(info);
      _this.handleMouseDown(event, {
        initialPoint: info
      });
    });
    _defineProperty(_assertThisInitialized(_this), "handleMouseDown", function(event, config) {
      var onMouseDown = _this.props.onMouseDown;
      if (onMouseDown) {
        onMouseDown.apply(_assertThisInitialized(_this), _this.getColors(_this.hsv));
      }
      _this.handleDrag(event, config, _this.hsv);
    });
    return _this;
  }
  _createClass(BaseComponent2, [{
    key: "getDOMRegion",
    value: function getDOMRegion() {
      return import_region.default.fromDOM(this.rootRef.current);
    }
  }, {
    key: "getColors",
    value: function getColors(hsv) {
      var inPicker = this.props.inPicker;
      var first = inPicker ? hsv : toStringValue_default(hsv);
      var args = [first];
      if (!inPicker) {
        args.push(_objectSpread2({}, hsv));
      }
      return args;
    }
  }, {
    key: "handleUpdate",
    value: function handleUpdate(event, config) {
      var diff = config.diff || {
        top: 0,
        left: 0
      };
      var initialPoint = config.initialPoint;
      if (initialPoint) {
        var left;
        left = initialPoint.x + diff.left;
        var top = initialPoint.y + diff.top;
        left = Math.max(left, config.minLeft);
        left = Math.min(left, config.maxLeft);
        this.setState({
          top,
          left,
          mouseDown: {
            x: left,
            y: top,
            width: initialPoint.width,
            height: initialPoint.height
          }
        });
      }
    }
  }, {
    key: "handleDrag",
    value: function handleDrag(event, config, hsv) {
      var onDrag = this.props.onDrag;
      this.handleUpdate(event, config);
      if (onDrag) {
        onDrag.apply(this, this.getColors(hsv));
      }
    }
  }, {
    key: "handleDrop",
    value: function handleDrop(event, config, hsv) {
      var onChange = this.props.onChange;
      this.handleUpdate(event, config);
      this.setState({
        mouseDown: false
      });
      if (onChange) {
        onChange.apply(this, this.getColors(hsv));
      }
    }
  }]);
  return BaseComponent2;
}(import_react.Component);
_defineProperty(BaseComponent, "propTypes", basePropTypes);
_defineProperty(BaseComponent, "defaultProps", baseDefaultProps);
var common_default = BaseComponent;

// node_modules/@vtaits/react-color-picker/es/defaultColor.js
var defaultColor_default = "red";

// node_modules/@vtaits/react-color-picker/es/utils/validate.js
var validate_default = function(info) {
  var height = info.height, width = info.width;
  if (info.x < 0) {
    info.x = 0;
  }
  if (info.x >= width) {
    info.x = width;
  }
  if (info.y < 0) {
    info.y = 0;
  }
  if (info.y >= height) {
    info.y = height;
  }
  return info;
};

// node_modules/@vtaits/react-color-picker/es/utils/toColorValue.js
var toColorValue = function toColorValue2(value) {
  if (typeof value === "string") {
    return toHsv(value);
  }
  return {
    h: value.h,
    s: value.s,
    v: value.v,
    a: value.a
  };
};
var toColorValue_default = toColorValue;

// node_modules/@vtaits/react-color-picker/es/HueSpectrum.js
function ownKeys3(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys3(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys3(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _createSuper2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var HueSpectrum = function(_BaseComponent) {
  _inherits(HueSpectrum2, _BaseComponent);
  var _super = _createSuper2(HueSpectrum2);
  function HueSpectrum2() {
    var _this;
    _classCallCheck(this, HueSpectrum2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "state", _objectSpread3(_objectSpread3({}, baseInitialState), {}, {
      h: 0
    }));
    return _this;
  }
  _createClass(HueSpectrum2, [{
    key: "isComponentMounted",
    value: function isComponentMounted() {
      return this.mounted;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.mounted = true;
      this.updateDragPositionIf();
    }
  }, {
    key: "updateDragPositionIf",
    value: function updateDragPositionIf() {
      if (!this.props.height) {
        this.setState({});
      }
    }
  }, {
    key: "getDragPosition",
    value: function getDragPosition() {
      var _this$props = this.props, height = _this$props.height, pointerSize = _this$props.pointerSize;
      if (!height && !this.isComponentMounted()) {
        return null;
      }
      var computedHeight = height || this.getDOMRegion().getHeight();
      var size = pointerSize;
      var pos = Math.round(this.hsv.h * computedHeight / 360);
      var diff = Math.round(size / 2);
      return pos - diff;
    }
  }, {
    key: "updateColor",
    value: function updateColor(point) {
      var newPoint = validate_default(point);
      this.hsv.h = newPoint.y * 360 / newPoint.height;
      var newHsv = _objectSpread3({}, this.hsv);
      var newH;
      if (this.hsv.h !== 0) {
        newH = this.hsv.h;
      }
      newH = this.hsv.h !== 0 ? this.hsv.h : 0;
      this.setState({
        h: newH
      });
      this.hsv = newHsv;
      return newHsv;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props, style = _this$props2.style, value = _this$props2.value, defaultColor = _this$props2.defaultColor, pointerSize = _this$props2.pointerSize, height = _this$props2.height, width = _this$props2.width;
      var h = this.state.h;
      this.hsv = toColorValue_default(value || defaultColor);
      if (h === 360 && !this.hsv.h) {
        this.hsv.h = 360;
      }
      var rootStyle = _objectSpread3({}, style);
      if (height) {
        rootStyle.height = height;
      }
      if (width) {
        rootStyle.width = width;
      }
      var dragStyle = {
        height: pointerSize
      };
      var dragPos = this.getDragPosition();
      if (dragPos !== null) {
        dragStyle.top = dragPos;
        dragStyle.display = "block";
      }
      return import_react2.default.createElement("div", {
        className: "react-color-picker__hue-spectrum",
        style: rootStyle,
        onMouseDown: this.onMouseDown,
        role: "button",
        ref: this.rootRef,
        tabIndex: 0
      }, import_react2.default.createElement("div", {
        className: "react-color-picker__hue-drag",
        style: dragStyle
      }, import_react2.default.createElement("div", {
        className: "react-color-picker__hue-inner"
      })));
    }
  }]);
  return HueSpectrum2;
}(common_default);
_defineProperty(HueSpectrum, "propTypes", _objectSpread3(_objectSpread3({}, basePropTypes), {}, {
  value: import_prop_types2.default.any,
  height: import_prop_types2.default.number,
  width: import_prop_types2.default.number,
  pointerSize: import_prop_types2.default.number,
  defaultColor: import_prop_types2.default.any,
  isHueSpectrum: import_prop_types2.default.bool
}));
_defineProperty(HueSpectrum, "defaultProps", _objectSpread3(_objectSpread3({}, baseDefaultProps), {}, {
  value: null,
  height: 300,
  width: 30,
  pointerSize: 3,
  defaultColor: defaultColor_default,
  isHueSpectrum: true
}));
var HueSpectrum_default = HueSpectrum;

// node_modules/@vtaits/react-color-picker/es/SaturationSpectrum.js
init_assertThisInitialized();
var import_react3 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());
var import_classnames = __toESM(require_classnames());
function ownKeys4(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread4(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys4(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys4(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _createSuper3(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct3();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct3() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var getSaturationForPoint = function getSaturationForPoint2(point) {
  return point.x / point.width;
};
var getColorValueForPoint = function getColorValueForPoint2(point) {
  return (point.height - point.y) / point.height;
};
var prepareBackgroundColor = function prepareBackgroundColor2(color) {
  var hsv = color;
  var col = fromRatio({
    h: hsv.h % 360 / 360,
    s: 1,
    v: 1
  });
  return col.toRgbString();
};
var SaturationSpectrum = function(_BaseComponent) {
  _inherits(SaturationSpectrum2, _BaseComponent);
  var _super = _createSuper3(SaturationSpectrum2);
  function SaturationSpectrum2() {
    var _this;
    _classCallCheck(this, SaturationSpectrum2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "state", _objectSpread4(_objectSpread4({}, baseInitialState), {}, {
      pointerTop: null,
      pointerLeft: null
    }));
    return _this;
  }
  _createClass(SaturationSpectrum2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.mounted = true;
      this.updateDragPositionIf();
    }
  }, {
    key: "isComponentMounted",
    value: function isComponentMounted() {
      return this.mounted;
    }
  }, {
    key: "updateDragPositionIf",
    value: function updateDragPositionIf() {
      if (!this.props.height || !this.props.width) {
        this.setState({});
      }
    }
  }, {
    key: "getDragPosition",
    value: function getDragPosition() {
      var _this$props = this.props, value = _this$props.value, pointerSize = _this$props.pointerSize;
      var _this$props2 = this.props, width = _this$props2.width, height = _this$props2.height;
      var mouseDown = this.state.mouseDown;
      var sizeDefined = width && height;
      if (!sizeDefined && !this.isComponentMounted()) {
        return null;
      }
      var region;
      if (!sizeDefined) {
        region = this.getDOMRegion();
        height = height || region.getHeight();
        width = width || region.getWidth();
      }
      var x = this.hsv.s * width;
      var y = height - this.hsv.v * height;
      var size = pointerSize;
      var diff = Math.floor(size / 2);
      if (value && mouseDown && !Number.isNaN(mouseDown.x)) {
        x = mouseDown.x;
      }
      return {
        left: x - diff,
        top: y - diff
      };
    }
  }, {
    key: "prepareProps",
    value: function prepareProps(thisProps) {
      var props = _objectSpread4({}, thisProps);
      var color = props.value || props.defaultColor;
      props.color = color;
      this.hsv = toColorValue_default(color);
      props.style = this.prepareStyle(props);
      props.className = (0, import_classnames.default)(thisProps.className, "react-color-picker__saturation-spectrum");
      return props;
    }
  }, {
    key: "prepareStyle",
    value: function prepareStyle(props) {
      var style = _objectSpread4({}, props.style);
      if (props.height) {
        style.height = props.height;
      }
      if (props.width) {
        style.width = props.width;
      }
      style.backgroundColor = prepareBackgroundColor(this.hsv);
      return style;
    }
  }, {
    key: "render",
    value: function render() {
      var pointerSize = this.props.pointerSize;
      var props = this.prepareProps(this.props);
      var dragStyle = {
        width: pointerSize,
        height: pointerSize
      };
      var dragPos = this.getDragPosition();
      if (dragPos) {
        dragStyle.top = dragPos.top;
        dragStyle.left = dragPos.left;
        dragStyle.display = "block";
      }
      return import_react3.default.createElement("div", {
        className: props.className,
        style: props.style,
        onMouseDown: this.onMouseDown,
        role: "button",
        ref: this.rootRef,
        tabIndex: 0
      }, import_react3.default.createElement("div", {
        className: "react-color-picker__saturation-white"
      }, import_react3.default.createElement("div", {
        className: "react-color-picker__saturation-black"
      })), import_react3.default.createElement("div", {
        className: "react-color-picker__saturation-drag",
        style: dragStyle
      }, import_react3.default.createElement("div", {
        className: "react-color-picker__saturation-inner"
      })));
    }
  }, {
    key: "updateColor",
    value: function updateColor(point) {
      var newPoint = validate_default(point);
      this.hsv.s = getSaturationForPoint(newPoint);
      this.hsv.v = getColorValueForPoint(newPoint);
      var newHsv = _objectSpread4({}, this.hsv);
      this.hsv = newHsv;
      return newHsv;
    }
  }]);
  return SaturationSpectrum2;
}(common_default);
_defineProperty(SaturationSpectrum, "propTypes", _objectSpread4(_objectSpread4({}, basePropTypes), {}, {
  value: import_prop_types3.default.any,
  height: import_prop_types3.default.number,
  width: import_prop_types3.default.number,
  pointerSize: import_prop_types3.default.number,
  defaultColor: import_prop_types3.default.any,
  isSaturationSpectrum: import_prop_types3.default.bool
}));
_defineProperty(SaturationSpectrum, "defaultProps", _objectSpread4(_objectSpread4({}, baseDefaultProps), {}, {
  value: null,
  height: 300,
  width: 300,
  pointerSize: 7,
  defaultColor: defaultColor_default,
  isSaturationSpectrum: true
}));
var SaturationSpectrum_default = SaturationSpectrum;

// node_modules/@vtaits/react-color-picker/es/index.js
var _excluded = ["className", "hueStyle", "hueHeight", "hueMargin", "hueWidth", "defaultColor", "value", "saturationHeight", "saturationWidth"];
function ownKeys5(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread5(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys5(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys5(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _createSuper4(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct4();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct4() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var ColorPicker = function(_Component) {
  _inherits(ColorPicker2, _Component);
  var _super = _createSuper4(ColorPicker2);
  function ColorPicker2(props) {
    var _this;
    _classCallCheck(this, ColorPicker2);
    _this = _super.call(this, props);
    _defineProperty(_assertThisInitialized(_this), "handleSaturationChange", function(color) {
      _this.handleChange(color);
    });
    _defineProperty(_assertThisInitialized(_this), "handleHueChange", function(color) {
      _this.handleChange(color);
    });
    _defineProperty(_assertThisInitialized(_this), "handleHueDrag", function(hsv) {
      _this.setState({
        dragHue: hsv.h
      });
      _this.handleDrag(hsv);
    });
    _defineProperty(_assertThisInitialized(_this), "handleSaturationDrag", function(hsv) {
      _this.handleDrag(hsv);
    });
    _defineProperty(_assertThisInitialized(_this), "handleHueMouseDown", function(hsv) {
      _this.setState({
        dragHue: hsv.h
      });
    });
    _defineProperty(_assertThisInitialized(_this), "handleSaturationMouseDown", function(hsv) {
      _this.setState({
        dragHue: hsv.h
      });
    });
    _this.state = {
      dragHue: null
    };
    return _this;
  }
  _createClass(ColorPicker2, [{
    key: "handleDrag",
    value: function handleDrag(color) {
      var onDrag = this.props.onDrag;
      onDrag(toStringValue_default(color), color);
    }
  }, {
    key: "handleChange",
    value: function handleChange(color) {
      var onChange = this.props.onChange;
      this.setState({
        dragHue: null
      });
      var newColor = _objectSpread5({}, color);
      var value = toStringValue_default(newColor);
      onChange(value, newColor);
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var propsClassName = props.className, propsHueStyle = props.hueStyle, hueHeight = props.hueHeight, hueMargin = props.hueMargin, hueWidth = props.hueWidth, defaultColor = props.defaultColor, propsValue = props.value, saturationHeight = props.saturationHeight, saturationWidth = props.saturationWidth, divProps = _objectWithoutProperties(props, _excluded);
      var dragHue = this.state.dragHue;
      var className = (0, import_classnames2.default)(propsClassName, "cp react-color-picker");
      var hueStyle = _objectSpread5(_objectSpread5({}, propsHueStyle), {}, {
        marginLeft: hueMargin
      });
      var value = toColorValue_default(propsValue || defaultColor);
      var children = props.children;
      var hueSpectrumProps = null;
      var saturationSpectrumProps = null;
      if (children) {
        children = import_react4.default.Children.toArray(children).forEach(function(child) {
          if (child && child.props) {
            if (child.props.isHueSpectrum) {
              hueSpectrumProps = _objectSpread5({}, child.props);
            }
            if (child.props.isSaturationSpectrum) {
              saturationSpectrumProps = _objectSpread5({}, child.props);
            }
          }
        });
      }
      var saturationConfig = _objectSpread5({
        onDrag: this.handleSaturationDrag,
        onChange: this.handleSaturationChange,
        onMouseDown: this.handleSaturationMouseDown
      }, saturationSpectrumProps);
      if (saturationConfig.width === void 0) {
        saturationConfig.width = saturationWidth;
      }
      if (saturationConfig.height === void 0) {
        saturationConfig.height = saturationHeight;
      }
      saturationConfig.inPicker = true;
      var hueConfig = _objectSpread5({
        onDrag: this.handleHueDrag,
        onChange: this.handleHueChange,
        onMouseDown: this.handleHueMouseDown,
        style: hueStyle
      }, hueSpectrumProps);
      if (hueConfig.width === void 0) {
        hueConfig.width = hueWidth;
      }
      if (hueConfig.height === void 0) {
        hueConfig.height = hueHeight || saturationHeight;
      }
      hueConfig.inPicker = true;
      if (dragHue) {
        value.h = dragHue;
      }
      saturationConfig.value = _objectSpread5({}, value);
      hueConfig.value = _objectSpread5({}, value);
      return import_react4.default.createElement("div", _extends({}, divProps, {
        className
      }), import_react4.default.createElement(SaturationSpectrum_default, saturationConfig), import_react4.default.createElement(HueSpectrum_default, hueConfig));
    }
  }]);
  return ColorPicker2;
}(import_react4.Component);
_defineProperty(ColorPicker, "propTypes", {
  className: import_prop_types4.default.string,
  hueStyle: import_prop_types4.default.objectOf(import_prop_types4.default.oneOfType([import_prop_types4.default.string, import_prop_types4.default.number])),
  onDrag: import_prop_types4.default.func,
  onChange: import_prop_types4.default.func,
  value: import_prop_types4.default.any,
  defaultColor: import_prop_types4.default.any,
  hueHeight: import_prop_types4.default.number,
  hueMargin: import_prop_types4.default.number,
  hueWidth: import_prop_types4.default.number,
  saturationWidth: import_prop_types4.default.number,
  saturationHeight: import_prop_types4.default.number,
  children: import_prop_types4.default.node
});
_defineProperty(ColorPicker, "defaultProps", {
  className: "",
  hueStyle: {},
  onDrag: Function.prototype,
  onChange: Function.prototype,
  value: null,
  defaultColor: defaultColor_default,
  hueHeight: null,
  hueMargin: 10,
  hueWidth: 30,
  saturationWidth: 300,
  saturationHeight: 300,
  children: null
});
var es_default = ColorPicker;

// dep:@vtaits_react-color-picker
var vtaits_react_color_picker_default = es_default;
export {
  HueSpectrum_default as HueSpectrum,
  SaturationSpectrum_default as SaturationSpectrum,
  vtaits_react_color_picker_default as default
};
//# sourceMappingURL=@vtaits_react-color-picker.js.map
