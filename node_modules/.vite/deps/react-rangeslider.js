import {
  require_prop_types
} from "./chunk-DSFMVNFM.js";
import "./chunk-3M2UZNYF.js";
import "./chunk-VGPEVICO.js";
import {
  require_classnames
} from "./chunk-U56G3BF2.js";
import {
  require_react
} from "./chunk-KL6BCPSF.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-S5KM4IGW.js";

// node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js
var ResizeObserver_es_exports = {};
__export(ResizeObserver_es_exports, {
  default: () => ResizeObserver_es_default
});
function throttle(callback, delay) {
  var leadingCall = false, trailingCall = false, lastCallTime = 0;
  function resolvePending() {
    if (leadingCall) {
      leadingCall = false;
      callback();
    }
    if (trailingCall) {
      proxy();
    }
  }
  function timeoutCallback() {
    requestAnimationFrame$1(resolvePending);
  }
  function proxy() {
    var timeStamp = Date.now();
    if (leadingCall) {
      if (timeStamp - lastCallTime < trailingTimeout) {
        return;
      }
      trailingCall = true;
    } else {
      leadingCall = true;
      trailingCall = false;
      setTimeout(timeoutCallback, delay);
    }
    lastCallTime = timeStamp;
  }
  return proxy;
}
function toFloat(value) {
  return parseFloat(value) || 0;
}
function getBordersSize(styles) {
  var positions = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    positions[_i - 1] = arguments[_i];
  }
  return positions.reduce(function(size, position) {
    var value = styles["border-" + position + "-width"];
    return size + toFloat(value);
  }, 0);
}
function getPaddings(styles) {
  var positions = ["top", "right", "bottom", "left"];
  var paddings = {};
  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
    var position = positions_1[_i];
    var value = styles["padding-" + position];
    paddings[position] = toFloat(value);
  }
  return paddings;
}
function getSVGContentRect(target) {
  var bbox = target.getBBox();
  return createRectInit(0, 0, bbox.width, bbox.height);
}
function getHTMLElementContentRect(target) {
  var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
  if (!clientWidth && !clientHeight) {
    return emptyRect;
  }
  var styles = getWindowOf(target).getComputedStyle(target);
  var paddings = getPaddings(styles);
  var horizPad = paddings.left + paddings.right;
  var vertPad = paddings.top + paddings.bottom;
  var width = toFloat(styles.width), height = toFloat(styles.height);
  if (styles.boxSizing === "border-box") {
    if (Math.round(width + horizPad) !== clientWidth) {
      width -= getBordersSize(styles, "left", "right") + horizPad;
    }
    if (Math.round(height + vertPad) !== clientHeight) {
      height -= getBordersSize(styles, "top", "bottom") + vertPad;
    }
  }
  if (!isDocumentElement(target)) {
    var vertScrollbar = Math.round(width + horizPad) - clientWidth;
    var horizScrollbar = Math.round(height + vertPad) - clientHeight;
    if (Math.abs(vertScrollbar) !== 1) {
      width -= vertScrollbar;
    }
    if (Math.abs(horizScrollbar) !== 1) {
      height -= horizScrollbar;
    }
  }
  return createRectInit(paddings.left, paddings.top, width, height);
}
function isDocumentElement(target) {
  return target === getWindowOf(target).document.documentElement;
}
function getContentRect(target) {
  if (!isBrowser) {
    return emptyRect;
  }
  if (isSVGGraphicsElement(target)) {
    return getSVGContentRect(target);
  }
  return getHTMLElementContentRect(target);
}
function createReadOnlyRect(_a) {
  var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
  var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
  var rect = Object.create(Constr.prototype);
  defineConfigurable(rect, {
    x,
    y,
    width,
    height,
    top: y,
    right: x + width,
    bottom: height + y,
    left: x
  });
  return rect;
}
function createRectInit(x, y, width, height) {
  return { x, y, width, height };
}
var MapShim, isBrowser, global$1, requestAnimationFrame$1, trailingTimeout, REFRESH_DELAY, transitionKeys, mutationObserverSupported, ResizeObserverController, defineConfigurable, getWindowOf, emptyRect, isSVGGraphicsElement, ResizeObservation, ResizeObserverEntry, ResizeObserverSPI, observers, ResizeObserver, index, ResizeObserver_es_default;
var init_ResizeObserver_es = __esm({
  "node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js"() {
    MapShim = function() {
      if (typeof Map !== "undefined") {
        return Map;
      }
      function getIndex(arr, key) {
        var result = -1;
        arr.some(function(entry, index2) {
          if (entry[0] === key) {
            result = index2;
            return true;
          }
          return false;
        });
        return result;
      }
      return function() {
        function class_1() {
          this.__entries__ = [];
        }
        Object.defineProperty(class_1.prototype, "size", {
          get: function() {
            return this.__entries__.length;
          },
          enumerable: true,
          configurable: true
        });
        class_1.prototype.get = function(key) {
          var index2 = getIndex(this.__entries__, key);
          var entry = this.__entries__[index2];
          return entry && entry[1];
        };
        class_1.prototype.set = function(key, value) {
          var index2 = getIndex(this.__entries__, key);
          if (~index2) {
            this.__entries__[index2][1] = value;
          } else {
            this.__entries__.push([key, value]);
          }
        };
        class_1.prototype.delete = function(key) {
          var entries = this.__entries__;
          var index2 = getIndex(entries, key);
          if (~index2) {
            entries.splice(index2, 1);
          }
        };
        class_1.prototype.has = function(key) {
          return !!~getIndex(this.__entries__, key);
        };
        class_1.prototype.clear = function() {
          this.__entries__.splice(0);
        };
        class_1.prototype.forEach = function(callback, ctx) {
          if (ctx === void 0) {
            ctx = null;
          }
          for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
            var entry = _a[_i];
            callback.call(ctx, entry[1], entry[0]);
          }
        };
        return class_1;
      }();
    }();
    isBrowser = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
    global$1 = function() {
      if (typeof global !== "undefined" && global.Math === Math) {
        return global;
      }
      if (typeof self !== "undefined" && self.Math === Math) {
        return self;
      }
      if (typeof window !== "undefined" && window.Math === Math) {
        return window;
      }
      return Function("return this")();
    }();
    requestAnimationFrame$1 = function() {
      if (typeof requestAnimationFrame === "function") {
        return requestAnimationFrame.bind(global$1);
      }
      return function(callback) {
        return setTimeout(function() {
          return callback(Date.now());
        }, 1e3 / 60);
      };
    }();
    trailingTimeout = 2;
    REFRESH_DELAY = 20;
    transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
    mutationObserverSupported = typeof MutationObserver !== "undefined";
    ResizeObserverController = function() {
      function ResizeObserverController2() {
        this.connected_ = false;
        this.mutationEventsAdded_ = false;
        this.mutationsObserver_ = null;
        this.observers_ = [];
        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
      }
      ResizeObserverController2.prototype.addObserver = function(observer) {
        if (!~this.observers_.indexOf(observer)) {
          this.observers_.push(observer);
        }
        if (!this.connected_) {
          this.connect_();
        }
      };
      ResizeObserverController2.prototype.removeObserver = function(observer) {
        var observers2 = this.observers_;
        var index2 = observers2.indexOf(observer);
        if (~index2) {
          observers2.splice(index2, 1);
        }
        if (!observers2.length && this.connected_) {
          this.disconnect_();
        }
      };
      ResizeObserverController2.prototype.refresh = function() {
        var changesDetected = this.updateObservers_();
        if (changesDetected) {
          this.refresh();
        }
      };
      ResizeObserverController2.prototype.updateObservers_ = function() {
        var activeObservers = this.observers_.filter(function(observer) {
          return observer.gatherActive(), observer.hasActive();
        });
        activeObservers.forEach(function(observer) {
          return observer.broadcastActive();
        });
        return activeObservers.length > 0;
      };
      ResizeObserverController2.prototype.connect_ = function() {
        if (!isBrowser || this.connected_) {
          return;
        }
        document.addEventListener("transitionend", this.onTransitionEnd_);
        window.addEventListener("resize", this.refresh);
        if (mutationObserverSupported) {
          this.mutationsObserver_ = new MutationObserver(this.refresh);
          this.mutationsObserver_.observe(document, {
            attributes: true,
            childList: true,
            characterData: true,
            subtree: true
          });
        } else {
          document.addEventListener("DOMSubtreeModified", this.refresh);
          this.mutationEventsAdded_ = true;
        }
        this.connected_ = true;
      };
      ResizeObserverController2.prototype.disconnect_ = function() {
        if (!isBrowser || !this.connected_) {
          return;
        }
        document.removeEventListener("transitionend", this.onTransitionEnd_);
        window.removeEventListener("resize", this.refresh);
        if (this.mutationsObserver_) {
          this.mutationsObserver_.disconnect();
        }
        if (this.mutationEventsAdded_) {
          document.removeEventListener("DOMSubtreeModified", this.refresh);
        }
        this.mutationsObserver_ = null;
        this.mutationEventsAdded_ = false;
        this.connected_ = false;
      };
      ResizeObserverController2.prototype.onTransitionEnd_ = function(_a) {
        var _b = _a.propertyName, propertyName = _b === void 0 ? "" : _b;
        var isReflowProperty = transitionKeys.some(function(key) {
          return !!~propertyName.indexOf(key);
        });
        if (isReflowProperty) {
          this.refresh();
        }
      };
      ResizeObserverController2.getInstance = function() {
        if (!this.instance_) {
          this.instance_ = new ResizeObserverController2();
        }
        return this.instance_;
      };
      ResizeObserverController2.instance_ = null;
      return ResizeObserverController2;
    }();
    defineConfigurable = function(target, props) {
      for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
        var key = _a[_i];
        Object.defineProperty(target, key, {
          value: props[key],
          enumerable: false,
          writable: false,
          configurable: true
        });
      }
      return target;
    };
    getWindowOf = function(target) {
      var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
      return ownerGlobal || global$1;
    };
    emptyRect = createRectInit(0, 0, 0, 0);
    isSVGGraphicsElement = function() {
      if (typeof SVGGraphicsElement !== "undefined") {
        return function(target) {
          return target instanceof getWindowOf(target).SVGGraphicsElement;
        };
      }
      return function(target) {
        return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === "function";
      };
    }();
    ResizeObservation = function() {
      function ResizeObservation2(target) {
        this.broadcastWidth = 0;
        this.broadcastHeight = 0;
        this.contentRect_ = createRectInit(0, 0, 0, 0);
        this.target = target;
      }
      ResizeObservation2.prototype.isActive = function() {
        var rect = getContentRect(this.target);
        this.contentRect_ = rect;
        return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
      };
      ResizeObservation2.prototype.broadcastRect = function() {
        var rect = this.contentRect_;
        this.broadcastWidth = rect.width;
        this.broadcastHeight = rect.height;
        return rect;
      };
      return ResizeObservation2;
    }();
    ResizeObserverEntry = function() {
      function ResizeObserverEntry2(target, rectInit) {
        var contentRect = createReadOnlyRect(rectInit);
        defineConfigurable(this, { target, contentRect });
      }
      return ResizeObserverEntry2;
    }();
    ResizeObserverSPI = function() {
      function ResizeObserverSPI2(callback, controller, callbackCtx) {
        this.activeObservations_ = [];
        this.observations_ = new MapShim();
        if (typeof callback !== "function") {
          throw new TypeError("The callback provided as parameter 1 is not a function.");
        }
        this.callback_ = callback;
        this.controller_ = controller;
        this.callbackCtx_ = callbackCtx;
      }
      ResizeObserverSPI2.prototype.observe = function(target) {
        if (!arguments.length) {
          throw new TypeError("1 argument required, but only 0 present.");
        }
        if (typeof Element === "undefined" || !(Element instanceof Object)) {
          return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
          throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        if (observations.has(target)) {
          return;
        }
        observations.set(target, new ResizeObservation(target));
        this.controller_.addObserver(this);
        this.controller_.refresh();
      };
      ResizeObserverSPI2.prototype.unobserve = function(target) {
        if (!arguments.length) {
          throw new TypeError("1 argument required, but only 0 present.");
        }
        if (typeof Element === "undefined" || !(Element instanceof Object)) {
          return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
          throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        if (!observations.has(target)) {
          return;
        }
        observations.delete(target);
        if (!observations.size) {
          this.controller_.removeObserver(this);
        }
      };
      ResizeObserverSPI2.prototype.disconnect = function() {
        this.clearActive();
        this.observations_.clear();
        this.controller_.removeObserver(this);
      };
      ResizeObserverSPI2.prototype.gatherActive = function() {
        var _this = this;
        this.clearActive();
        this.observations_.forEach(function(observation) {
          if (observation.isActive()) {
            _this.activeObservations_.push(observation);
          }
        });
      };
      ResizeObserverSPI2.prototype.broadcastActive = function() {
        if (!this.hasActive()) {
          return;
        }
        var ctx = this.callbackCtx_;
        var entries = this.activeObservations_.map(function(observation) {
          return new ResizeObserverEntry(observation.target, observation.broadcastRect());
        });
        this.callback_.call(ctx, entries, ctx);
        this.clearActive();
      };
      ResizeObserverSPI2.prototype.clearActive = function() {
        this.activeObservations_.splice(0);
      };
      ResizeObserverSPI2.prototype.hasActive = function() {
        return this.activeObservations_.length > 0;
      };
      return ResizeObserverSPI2;
    }();
    observers = typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : new MapShim();
    ResizeObserver = function() {
      function ResizeObserver2(callback) {
        if (!(this instanceof ResizeObserver2)) {
          throw new TypeError("Cannot call a class as a function.");
        }
        if (!arguments.length) {
          throw new TypeError("1 argument required, but only 0 present.");
        }
        var controller = ResizeObserverController.getInstance();
        var observer = new ResizeObserverSPI(callback, controller, this);
        observers.set(this, observer);
      }
      return ResizeObserver2;
    }();
    [
      "observe",
      "unobserve",
      "disconnect"
    ].forEach(function(method) {
      ResizeObserver.prototype[method] = function() {
        var _a;
        return (_a = observers.get(this))[method].apply(_a, arguments);
      };
    });
    index = function() {
      if (typeof global$1.ResizeObserver !== "undefined") {
        return global$1.ResizeObserver;
      }
      return ResizeObserver;
    }();
    ResizeObserver_es_default = index;
  }
});

// node_modules/react-rangeslider/lib/utils.js
var require_utils = __commonJS({
  "node_modules/react-rangeslider/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.capitalize = capitalize;
    exports.clamp = clamp;
    function capitalize(str) {
      return str.charAt(0).toUpperCase() + str.substr(1);
    }
    function clamp(value, min, max) {
      return Math.min(Math.max(value, min), max);
    }
  }
});

// node_modules/react-rangeslider/lib/Rangeslider.js
var require_Rangeslider = __commonJS({
  "node_modules/react-rangeslider/lib/Rangeslider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _classnames = require_classnames();
    var _classnames2 = _interopRequireDefault(_classnames);
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    var _resizeObserverPolyfill = (init_ResizeObserver_es(), __toCommonJS(ResizeObserver_es_exports));
    var _resizeObserverPolyfill2 = _interopRequireDefault(_resizeObserverPolyfill);
    var _utils = require_utils();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self2, call) {
      if (!self2) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self2;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var constants = {
      orientation: {
        horizontal: {
          dimension: "width",
          direction: "left",
          reverseDirection: "right",
          coordinate: "x"
        },
        vertical: {
          dimension: "height",
          direction: "top",
          reverseDirection: "bottom",
          coordinate: "y"
        }
      }
    };
    var Slider = function(_Component) {
      _inherits(Slider2, _Component);
      function Slider2(props, context) {
        _classCallCheck(this, Slider2);
        var _this = _possibleConstructorReturn(this, (Slider2.__proto__ || Object.getPrototypeOf(Slider2)).call(this, props, context));
        _this.handleFormat = function(value) {
          var format = _this.props.format;
          return format ? format(value) : value;
        };
        _this.handleUpdate = function() {
          if (!_this.slider) {
            return;
          }
          var orientation = _this.props.orientation;
          var dimension = (0, _utils.capitalize)(constants.orientation[orientation].dimension);
          var sliderPos = _this.slider["offset" + dimension];
          var handlePos = _this.handle["offset" + dimension];
          _this.setState({
            limit: sliderPos - handlePos,
            grab: handlePos / 2
          });
        };
        _this.handleStart = function(e) {
          var onChangeStart = _this.props.onChangeStart;
          document.addEventListener("mousemove", _this.handleDrag);
          document.addEventListener("mouseup", _this.handleEnd);
          _this.setState({
            active: true
          }, function() {
            onChangeStart && onChangeStart(e);
          });
        };
        _this.handleDrag = function(e) {
          e.stopPropagation();
          var onChange = _this.props.onChange;
          var _e$target = e.target, className = _e$target.className, classList = _e$target.classList, dataset = _e$target.dataset;
          if (!onChange || className === "rangeslider__labels")
            return;
          var value = _this.position(e);
          if (classList && classList.contains("rangeslider__label-item") && dataset.value) {
            value = parseFloat(dataset.value);
          }
          onChange && onChange(value, e);
        };
        _this.handleEnd = function(e) {
          var onChangeComplete = _this.props.onChangeComplete;
          _this.setState({
            active: false
          }, function() {
            onChangeComplete && onChangeComplete(e);
          });
          document.removeEventListener("mousemove", _this.handleDrag);
          document.removeEventListener("mouseup", _this.handleEnd);
        };
        _this.handleKeyDown = function(e) {
          e.preventDefault();
          var keyCode = e.keyCode;
          var _this$props = _this.props, value = _this$props.value, min = _this$props.min, max = _this$props.max, step = _this$props.step, onChange = _this$props.onChange;
          var sliderValue = void 0;
          switch (keyCode) {
            case 38:
            case 39:
              sliderValue = value + step > max ? max : value + step;
              onChange && onChange(sliderValue, e);
              break;
            case 37:
            case 40:
              sliderValue = value - step < min ? min : value - step;
              onChange && onChange(sliderValue, e);
              break;
          }
        };
        _this.getPositionFromValue = function(value) {
          var limit = _this.state.limit;
          var _this$props2 = _this.props, min = _this$props2.min, max = _this$props2.max;
          var diffMaxMin = max - min;
          var diffValMin = value - min;
          var percentage = diffValMin / diffMaxMin;
          var pos = Math.round(percentage * limit);
          return pos;
        };
        _this.getValueFromPosition = function(pos) {
          var limit = _this.state.limit;
          var _this$props3 = _this.props, orientation = _this$props3.orientation, min = _this$props3.min, max = _this$props3.max, step = _this$props3.step;
          var percentage = (0, _utils.clamp)(pos, 0, limit) / (limit || 1);
          var baseVal = step * Math.round(percentage * (max - min) / step);
          var value = orientation === "horizontal" ? baseVal + min : max - baseVal;
          return (0, _utils.clamp)(value, min, max);
        };
        _this.position = function(e) {
          var grab = _this.state.grab;
          var _this$props4 = _this.props, orientation = _this$props4.orientation, reverse = _this$props4.reverse;
          var node = _this.slider;
          var coordinateStyle = constants.orientation[orientation].coordinate;
          var directionStyle = reverse ? constants.orientation[orientation].reverseDirection : constants.orientation[orientation].direction;
          var clientCoordinateStyle = "client" + (0, _utils.capitalize)(coordinateStyle);
          var coordinate = !e.touches ? e[clientCoordinateStyle] : e.touches[0][clientCoordinateStyle];
          var direction = node.getBoundingClientRect()[directionStyle];
          var pos = reverse ? direction - coordinate - grab : coordinate - direction - grab;
          var value = _this.getValueFromPosition(pos);
          return value;
        };
        _this.coordinates = function(pos) {
          var _this$state = _this.state, limit = _this$state.limit, grab = _this$state.grab;
          var orientation = _this.props.orientation;
          var value = _this.getValueFromPosition(pos);
          var position = _this.getPositionFromValue(value);
          var handlePos = orientation === "horizontal" ? position + grab : position;
          var fillPos = orientation === "horizontal" ? handlePos : limit - handlePos;
          return {
            fill: fillPos,
            handle: handlePos,
            label: handlePos
          };
        };
        _this.renderLabels = function(labels) {
          return _react2.default.createElement(
            "ul",
            {
              ref: function ref(sl) {
                _this.labels = sl;
              },
              className: (0, _classnames2.default)("rangeslider__labels")
            },
            labels
          );
        };
        _this.state = {
          active: false,
          limit: 0,
          grab: 0
        };
        return _this;
      }
      _createClass(Slider2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.handleUpdate();
          var resizeObserver = new _resizeObserverPolyfill2.default(this.handleUpdate);
          resizeObserver.observe(this.slider);
        }
      }, {
        key: "render",
        value: function render() {
          var _this2 = this;
          var _props = this.props, value = _props.value, orientation = _props.orientation, className = _props.className, tooltip = _props.tooltip, reverse = _props.reverse, labels = _props.labels, min = _props.min, max = _props.max, handleLabel = _props.handleLabel;
          var active = this.state.active;
          var dimension = constants.orientation[orientation].dimension;
          var direction = reverse ? constants.orientation[orientation].reverseDirection : constants.orientation[orientation].direction;
          var position = this.getPositionFromValue(value);
          var coords = this.coordinates(position);
          var fillStyle = _defineProperty({}, dimension, coords.fill + "px");
          var handleStyle = _defineProperty({}, direction, coords.handle + "px");
          var showTooltip = tooltip && active;
          var labelItems = [];
          var labelKeys = Object.keys(labels);
          if (labelKeys.length > 0) {
            labelKeys = labelKeys.sort(function(a, b) {
              return reverse ? a - b : b - a;
            });
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = void 0;
            try {
              for (var _iterator = labelKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var key = _step.value;
                var labelPosition = this.getPositionFromValue(key);
                var labelCoords = this.coordinates(labelPosition);
                var labelStyle = _defineProperty({}, direction, labelCoords.label + "px");
                labelItems.push(_react2.default.createElement(
                  "li",
                  {
                    key,
                    className: (0, _classnames2.default)("rangeslider__label-item"),
                    "data-value": key,
                    onMouseDown: this.handleDrag,
                    onTouchStart: this.handleStart,
                    onTouchEnd: this.handleEnd,
                    style: labelStyle
                  },
                  this.props.labels[key]
                ));
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          }
          return _react2.default.createElement(
            "div",
            {
              ref: function ref(s) {
                _this2.slider = s;
              },
              className: (0, _classnames2.default)("rangeslider", "rangeslider-" + orientation, { "rangeslider-reverse": reverse }, className),
              onMouseDown: this.handleDrag,
              onMouseUp: this.handleEnd,
              onTouchStart: this.handleStart,
              onTouchEnd: this.handleEnd,
              "aria-valuemin": min,
              "aria-valuemax": max,
              "aria-valuenow": value,
              "aria-orientation": orientation
            },
            _react2.default.createElement("div", { className: "rangeslider__fill", style: fillStyle }),
            _react2.default.createElement(
              "div",
              {
                ref: function ref(sh) {
                  _this2.handle = sh;
                },
                className: "rangeslider__handle",
                onMouseDown: this.handleStart,
                onTouchMove: this.handleDrag,
                onTouchEnd: this.handleEnd,
                onKeyDown: this.handleKeyDown,
                style: handleStyle,
                tabIndex: 0
              },
              showTooltip ? _react2.default.createElement(
                "div",
                {
                  ref: function ref(st) {
                    _this2.tooltip = st;
                  },
                  className: "rangeslider__handle-tooltip"
                },
                _react2.default.createElement(
                  "span",
                  null,
                  this.handleFormat(value)
                )
              ) : null,
              _react2.default.createElement(
                "div",
                { className: "rangeslider__handle-label" },
                handleLabel
              )
            ),
            labels ? this.renderLabels(labelItems) : null
          );
        }
      }]);
      return Slider2;
    }(_react.Component);
    Slider.propTypes = {
      min: _propTypes2.default.number,
      max: _propTypes2.default.number,
      step: _propTypes2.default.number,
      value: _propTypes2.default.number,
      orientation: _propTypes2.default.string,
      tooltip: _propTypes2.default.bool,
      reverse: _propTypes2.default.bool,
      labels: _propTypes2.default.object,
      handleLabel: _propTypes2.default.string,
      format: _propTypes2.default.func,
      onChangeStart: _propTypes2.default.func,
      onChange: _propTypes2.default.func,
      onChangeComplete: _propTypes2.default.func
    };
    Slider.defaultProps = {
      min: 0,
      max: 100,
      step: 1,
      value: 0,
      orientation: "horizontal",
      tooltip: true,
      reverse: false,
      labels: {},
      handleLabel: ""
    };
    exports.default = Slider;
  }
});

// node_modules/react-rangeslider/lib/index.js
var require_lib = __commonJS({
  "node_modules/react-rangeslider/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _Rangeslider = require_Rangeslider();
    var _Rangeslider2 = _interopRequireDefault(_Rangeslider);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = _Rangeslider2.default;
  }
});

// dep:react-rangeslider
var react_rangeslider_default = require_lib();
export {
  react_rangeslider_default as default
};
//# sourceMappingURL=react-rangeslider.js.map
