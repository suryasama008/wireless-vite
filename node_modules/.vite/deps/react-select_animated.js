import {
  _createSuper,
  _objectSpread2,
  defaultComponents,
  memoize_one_esm_default
} from "./chunk-MKMHM5T3.js";
import {
  _slicedToArray
} from "./chunk-4OH2SGPV.js";
import {
  TransitionGroup_default,
  init_esm
} from "./chunk-72AWO2AC.js";
import {
  Transition_default
} from "./chunk-3WN2ST4R.js";
import "./chunk-TU577VYH.js";
import "./chunk-OH2OWROH.js";
import "./chunk-ABC7BXC2.js";
import {
  require_react_dom
} from "./chunk-AGYRAQNY.js";
import {
  _objectWithoutProperties
} from "./chunk-ED4V52F4.js";
import {
  _extends,
  init_extends
} from "./chunk-SUFR5NQW.js";
import "./chunk-EBW3JKEH.js";
import "./chunk-DSFMVNFM.js";
import "./chunk-3M2UZNYF.js";
import "./chunk-VGPEVICO.js";
import {
  _inherits
} from "./chunk-RZQS4WSX.js";
import "./chunk-4EC2YINL.js";
import "./chunk-HKWV5KNA.js";
import "./chunk-6SNKQ5Q3.js";
import "./chunk-AZHVXIJD.js";
import {
  _classCallCheck
} from "./chunk-QQCM6MLG.js";
import {
  _createClass
} from "./chunk-VPHLUJNF.js";
import {
  require_react
} from "./chunk-KL6BCPSF.js";
import {
  __toESM
} from "./chunk-S5KM4IGW.js";

// node_modules/react-select/animated/dist/react-select.esm.js
var React = __toESM(require_react());
var import_react = __toESM(require_react());
init_extends();
init_esm();
var import_react_dom = __toESM(require_react_dom());
var _excluded$4 = ["in", "onExited", "appear", "enter", "exit"];
var AnimatedInput = function AnimatedInput2(WrappedComponent) {
  return function(_ref) {
    _ref.in;
    _ref.onExited;
    _ref.appear;
    _ref.enter;
    _ref.exit;
    var props = _objectWithoutProperties(_ref, _excluded$4);
    return React.createElement(WrappedComponent, props);
  };
};
var _excluded$3 = ["component", "duration", "in", "onExited"];
var Fade = function Fade2(_ref) {
  var Tag = _ref.component, _ref$duration = _ref.duration, duration = _ref$duration === void 0 ? 1 : _ref$duration, inProp = _ref.in;
  _ref.onExited;
  var props = _objectWithoutProperties(_ref, _excluded$3);
  var nodeRef = (0, import_react.useRef)(null);
  var transition = {
    entering: {
      opacity: 0
    },
    entered: {
      opacity: 1,
      transition: "opacity ".concat(duration, "ms")
    },
    exiting: {
      opacity: 0
    },
    exited: {
      opacity: 0
    }
  };
  return React.createElement(Transition_default, {
    mountOnEnter: true,
    unmountOnExit: true,
    in: inProp,
    timeout: duration,
    nodeRef
  }, function(state) {
    var innerProps = {
      style: _objectSpread2({}, transition[state]),
      ref: nodeRef
    };
    return React.createElement(Tag, _extends({
      innerProps
    }, props));
  });
};
var collapseDuration = 260;
var Collapse = function(_Component) {
  _inherits(Collapse2, _Component);
  var _super = _createSuper(Collapse2);
  function Collapse2() {
    var _this;
    _classCallCheck(this, Collapse2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.duration = collapseDuration;
    _this.rafID = void 0;
    _this.state = {
      width: "auto"
    };
    _this.transition = {
      exiting: {
        width: 0,
        transition: "width ".concat(_this.duration, "ms ease-out")
      },
      exited: {
        width: 0
      }
    };
    _this.nodeRef = (0, import_react.createRef)();
    _this.getStyle = function(width) {
      return {
        overflow: "hidden",
        whiteSpace: "nowrap",
        width
      };
    };
    _this.getTransition = function(state) {
      return _this.transition[state];
    };
    return _this;
  }
  _createClass(Collapse2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;
      var ref = this.nodeRef.current;
      if (ref) {
        this.rafID = window.requestAnimationFrame(function() {
          var _ref$getBoundingClien = ref.getBoundingClientRect(), width = _ref$getBoundingClien.width;
          _this2.setState({
            width
          });
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.rafID) {
        window.cancelAnimationFrame(this.rafID);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;
      var _this$props = this.props, children = _this$props.children, inProp = _this$props.in, onExited = _this$props.onExited;
      var exitedProp = function exitedProp2() {
        if (_this3.nodeRef.current && onExited) {
          onExited(_this3.nodeRef.current);
        }
      };
      var width = this.state.width;
      return React.createElement(Transition_default, {
        enter: false,
        mountOnEnter: true,
        unmountOnExit: true,
        in: inProp,
        onExited: exitedProp,
        timeout: this.duration,
        nodeRef: this.nodeRef
      }, function(state) {
        var style = _objectSpread2(_objectSpread2({}, _this3.getStyle(width)), _this3.getTransition(state));
        return React.createElement("div", {
          ref: _this3.nodeRef,
          style
        }, children);
      });
    }
  }]);
  return Collapse2;
}(import_react.Component);
var _excluded$2 = ["in", "onExited"];
var AnimatedMultiValue = function AnimatedMultiValue2(WrappedComponent) {
  return function(_ref) {
    var inProp = _ref.in, onExited = _ref.onExited, props = _objectWithoutProperties(_ref, _excluded$2);
    return React.createElement(Collapse, {
      in: inProp,
      onExited
    }, React.createElement(WrappedComponent, _extends({
      cropWithEllipsis: inProp
    }, props)));
  };
};
var AnimatedPlaceholder = function AnimatedPlaceholder2(WrappedComponent) {
  return function(props) {
    return React.createElement(Fade, _extends({
      component: WrappedComponent,
      duration: props.isMulti ? collapseDuration : 1
    }, props));
  };
};
var AnimatedSingleValue = function AnimatedSingleValue2(WrappedComponent) {
  return function(props) {
    return React.createElement(Fade, _extends({
      component: WrappedComponent
    }, props));
  };
};
var _excluded$1 = ["component"];
var _excluded2 = ["children"];
var AnimatedValueContainer = function AnimatedValueContainer2(WrappedComponent) {
  return function(props) {
    return props.isMulti ? React.createElement(IsMultiValueContainer, _extends({
      component: WrappedComponent
    }, props)) : React.createElement(TransitionGroup_default, _extends({
      component: WrappedComponent
    }, props));
  };
};
var IsMultiValueContainer = function IsMultiValueContainer2(_ref) {
  var component = _ref.component, restProps = _objectWithoutProperties(_ref, _excluded$1);
  var multiProps = useIsMultiValueContainer(restProps);
  return React.createElement(TransitionGroup_default, _extends({
    component
  }, multiProps));
};
var useIsMultiValueContainer = function useIsMultiValueContainer2(_ref2) {
  var children = _ref2.children, props = _objectWithoutProperties(_ref2, _excluded2);
  var isMulti = props.isMulti, hasValue = props.hasValue, innerProps = props.innerProps, _props$selectProps = props.selectProps, components = _props$selectProps.components, controlShouldRenderValue = _props$selectProps.controlShouldRenderValue;
  var _useState = (0, import_react.useState)(isMulti && controlShouldRenderValue && hasValue), _useState2 = _slicedToArray(_useState, 2), cssDisplayFlex = _useState2[0], setCssDisplayFlex = _useState2[1];
  var _useState3 = (0, import_react.useState)(false), _useState4 = _slicedToArray(_useState3, 2), removingValue = _useState4[0], setRemovingValue = _useState4[1];
  (0, import_react.useEffect)(function() {
    if (hasValue && !cssDisplayFlex) {
      setCssDisplayFlex(true);
    }
  }, [hasValue, cssDisplayFlex]);
  (0, import_react.useEffect)(function() {
    if (removingValue && !hasValue && cssDisplayFlex) {
      setCssDisplayFlex(false);
    }
    setRemovingValue(false);
  }, [removingValue, hasValue, cssDisplayFlex]);
  var onExited = function onExited2() {
    return setRemovingValue(true);
  };
  var childMapper = function childMapper2(child) {
    if (isMulti && React.isValidElement(child)) {
      if (child.type === components.MultiValue) {
        return React.cloneElement(child, {
          onExited
        });
      }
      if (child.type === components.Placeholder && cssDisplayFlex) {
        return null;
      }
    }
    return child;
  };
  var newInnerProps = _objectSpread2(_objectSpread2({}, innerProps), {}, {
    style: _objectSpread2(_objectSpread2({}, innerProps === null || innerProps === void 0 ? void 0 : innerProps.style), {}, {
      display: cssDisplayFlex ? "flex" : "grid"
    })
  });
  var newProps = _objectSpread2(_objectSpread2({}, props), {}, {
    innerProps: newInnerProps,
    children: React.Children.toArray(children).map(childMapper)
  });
  return newProps;
};
var _excluded = ["Input", "MultiValue", "Placeholder", "SingleValue", "ValueContainer"];
var makeAnimated = function makeAnimated2() {
  var externalComponents = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var components = defaultComponents({
    components: externalComponents
  });
  var Input2 = components.Input, MultiValue2 = components.MultiValue, Placeholder2 = components.Placeholder, SingleValue2 = components.SingleValue, ValueContainer2 = components.ValueContainer, rest = _objectWithoutProperties(components, _excluded);
  return _objectSpread2({
    Input: AnimatedInput(Input2),
    MultiValue: AnimatedMultiValue(MultiValue2),
    Placeholder: AnimatedPlaceholder(Placeholder2),
    SingleValue: AnimatedSingleValue(SingleValue2),
    ValueContainer: AnimatedValueContainer(ValueContainer2)
  }, rest);
};
var AnimatedComponents = makeAnimated();
var Input = AnimatedComponents.Input;
var MultiValue = AnimatedComponents.MultiValue;
var Placeholder = AnimatedComponents.Placeholder;
var SingleValue = AnimatedComponents.SingleValue;
var ValueContainer = AnimatedComponents.ValueContainer;
var index = memoize_one_esm_default(makeAnimated);
var react_select_esm_default = index;

// dep:react-select_animated
var react_select_animated_default = react_select_esm_default;
export {
  Input,
  MultiValue,
  Placeholder,
  SingleValue,
  ValueContainer,
  react_select_animated_default as default
};
//# sourceMappingURL=react-select_animated.js.map
